apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: test
parameters:
  - name: TAG
    description: Which docker image tag should be deployed
    required: true
  - name: NAME
    description: Name of the objects to create
    required: true
  - name: SHORT_NAME
    description: Shorter name of the objects to create, can be max 24 chars
    required: true
  - name: SITEGROUP
    description: Which sitegroup this belongs to
    required: true
  - name: OPENSHIFT_PROJECT
    description: Which openshift project this is
    required: true
  - name: API
    description: URL of the graphql host
    required: false
  - name: API_VERSION
    description: Version of the graphql api
    required: false
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    labels:
      app: ${NAME}
    name: ${NAME}
  spec:
    replicas: 1
    selector:
      app: ${NAME}
      deploymentconfig: ${NAME}
    strategy:
      resources: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${NAME}
          deploymentconfig: ${NAME}
      spec:
        containers:
        - image: ${OPENSHIFT_PROJECT}/${SITEGROUP}:${TAG}
          name: nodejs
          env:
          - name: API
            value: ${API}
          - name: API_VERSION
            value: ${API_VERSION}
          - name: SSR_DISABLED
            value: "false"
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 1
              memory: 400Mi
            requests:
              cpu: 50m
              memory: 120Mi
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - nodejs
        from:
          kind: ImageStreamTag
          name: ${SITEGROUP}:${TAG}
      type: ImageChange
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: ${NAME}
    name: ${SHORT_NAME}
  spec:
    ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${NAME}
      deploymentconfig: ${NAME}
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    creationTimestamp: null
    labels:
      app: ${NAME}
    name: ${NAME}
  spec:
    host: ${SITEGROUP}.${TAG}.appuio.amazee.io
    port:
      targetPort: http
    to:
      kind: Service
      name: ${SHORT_NAME}
